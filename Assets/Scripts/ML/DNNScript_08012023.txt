using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using Assets.ML;
using System;
using System.Threading.Tasks;
using System.Linq;
using System.Threading;
using Assets.Scripts.ML;
using UnityEngine.Networking;
using System.IO;
using Assets;
using Newtonsoft.Json;

public class DNNScript : MonoBehaviour
{
    NewHeartRateScript hrUtil;

    public bool weightsUploaded = false;
    public bool trainingComplete = false;
    public bool trainingStarted = false;

    public bool newUserTrainingComplete = false;
    public bool newUserTrainingStarted = false;

    string newDeviceWeights = string.Empty;
    string newDeviceWeightsSGD = string.Empty;
    string newDeviceWeightsANNSGD = string.Empty;
    string newDeviceWeightsANNPSO = string.Empty;

    [SerializeField]
    private string apiURI;

    StreamWriter combinedUserDf;
    StreamWriter rdf;
    StreamWriter statisticsFile;

    public bool isInitialized = false;

    public double maxRRValue;
    public double minRRValue;

    public double maxHRValue;
    public double minHRValue;

    double[][] trainData;

    const int numInput = 2;
    const int numOutput = 2;

    double[] weightChanges = new double[32]; //NOTE : Check with Luca why this is 32, for now switched to 27

    //Initialized
    public NeuralNetworkBackProp neuralNetworkBackProp;

    double modelErrorANNBP = 0.0f;

    //ANN BP Params
    const int numHiddenANNBP = 6;
    double[] newWeightsANNBP;
    int maxEpochsANNBP = 10;
    double learnRateANNBP = 0.01;
    double momentumANNBP = 0.01;

    //New WriteAnalytics method
    public void WriteAnalytics(List<double[]> trainData, List<double[]> testData)
    {
        var activeUser = PlayerPrefs.GetString("ActivePlayer");
        var filePath = Application.persistentDataPath + "/Users/" + activeUser;

        //CombinedNormalizedReadings Path
        string combinedUserPath = filePath + "/combinedReadingsNormalized.txt";

        //Statistics Path
        string statisticsPath = filePath + "/analytics.txt";

        //Create Directory if do not exist
        if (!Directory.Exists(filePath))
        {
            Directory.CreateDirectory(filePath);
        }

        if (!File.Exists(statisticsPath))
        {
            statisticsFile = File.CreateText(statisticsPath);
        }
        else
        {
            statisticsFile = File.AppendText(statisticsPath);
        }

        if (!File.Exists(combinedUserPath))
        {
            combinedUserDf = File.CreateText(combinedUserPath);
        }
        else
        {
            combinedUserDf = File.AppendText(combinedUserPath);
        }

        #region combined data file
        if (trainData.Count == 0)
        {
            throw new InvalidOperationException("Cannot perform operation on empty list");
        }
        else
        {
            var normalisedData = Helpers.NormalizeTrainingData(trainData);
            //var normalisedData = Helpers.NormalizeTrainingData(trainingDataList);
            foreach (double[] trainDataLine in normalisedData)
            {
                string line = string.Join(",", trainDataLine);
                combinedUserDf.WriteLine(line);
            }
            combinedUserDf.Close();
        }
        #endregion

        var acc7 = neuralNetworkBackProp.Accuracy(testData.ToArray());
        Debug.Log("Accuracy " + string.Join(", ", acc7));

        #region statistics file
        statisticsFile.WriteLine(
            "---------------------------------------------------------------------------------------------"
        );
        statisticsFile.WriteLine("Number of Data Items (test): " + testData.Count.ToString());
        statisticsFile.WriteLine("ANN Back Prop");
        statisticsFile.WriteLine("Model Accuracy (federated learning): " + acc7);
        statisticsFile.Close();
        
        #endregion
    }

    // Start is called before the first frame update
    void Start()
    {
        hrUtil = GameObject.FindObjectOfType<NewHeartRateScript>();
    }

    public void InitializeModelANNBackProp(double[] weights)
    {
        neuralNetworkBackProp = new NeuralNetworkBackProp(numInput, numHiddenANNBP, numOutput);

        var allAreZero = weights.Any(v => v == 0);

        if (!allAreZero)
        {
            neuralNetworkBackProp.SetWeights(weights);
        }
    }

    public void TrainModel(object td)
    {
        var dataDict = td as Dictionary<string, object>;

        List<double[]> tDataArr = dataDict["TrainingData"] as List<double[]>;
        string dataPath = dataDict["DataPath"].ToString();
        Debug.Log("DataPath dnnscript: " + dataDict["DataPath"].ToString());
        List<double> startingWeights = dataDict["StartingWeights"] as List<double>;

        trainingStarted = true;
        trainingComplete = false;

        #region Read Data
        int numOfFeatures = tDataArr[0].Length;

        trainData = new double[tDataArr.Count][];

        for (int i = 0; i < tDataArr.Count; i++)
        {
            trainData[i] = new double[numOfFeatures];
        }

        for (int i = 0; i < trainData.Length; i++)
        {
            double[] data = trainData[i];
            for (int j = 0; j < data.Length; j++)
            {
                trainData[i][j] = Convert.ToDouble(data[j]);
            }
        }
        #endregion

        newWeightsANNBP = neuralNetworkBackProp.Train(
            trainData,
            maxEpochsANNBP,
            learnRateANNBP,
            momentumANNBP
        );
        neuralNetworkBackProp.SetWeights(newWeightsANNBP);
        modelErrorANNBP = neuralNetworkBackProp.Error(trainData, false);

        #region write local model
        newDeviceWeights = String.Empty;
        newDeviceWeightsSGD = String.Empty;
        newDeviceWeightsANNSGD = String.Join(",", newWeightsANNBP);
        newDeviceWeightsANNPSO = String.Empty;

        Debug.Log("startingWeights length: " + startingWeights);
        Debug.Log("newWeightsANNBP length: " + newWeightsANNBP.Length);
        Debug.Log("startingWeights: " + string.Join(", ", startingWeights));
        Debug.Log("newWeightsANNBP: " + string.Join(", ", newWeightsANNBP));

        int numElements = Math.Min(startingWeights.Count, newWeightsANNBP.Length);
        for (int counter = 0; counter < numElements; counter++)
        {
            weightChanges[counter] = startingWeights[counter] - newWeightsANNBP[counter];
        }
        rdf = File.CreateText(dataPath);

        ModelClass mc = new ModelClass()
        {
            modelData = newDeviceWeights,
            maxHR = (double)dataDict["maxHR"],
            minHR = (double)dataDict["minHR"],
            maxRR = (double)dataDict["maxRR"],
            minRR = (double)dataDict["minRR"]
        };

        ModelClass mcSGD = new ModelClass()
        {
            modelData = newDeviceWeightsSGD,
            maxHR = (double)dataDict["maxHR"],
            minHR = (double)dataDict["minHR"],
            maxRR = (double)dataDict["maxRR"],
            minRR = (double)dataDict["minRR"]
        };

        ModelClass mcANNPSO = new ModelClass()
        {
            modelData = newDeviceWeightsANNPSO,
            maxHR = (double)dataDict["maxHR"],
            minHR = (double)dataDict["minHR"],
            maxRR = (double)dataDict["maxRR"],
            minRR = (double)dataDict["minRR"]
        };

        ModelClass mcANNSGD = new ModelClass()
        {
            modelData = newDeviceWeightsANNSGD,
            maxHR = (double)dataDict["maxHR"],
            minHR = (double)dataDict["minHR"],
            maxRR = (double)dataDict["maxRR"],
            minRR = (double)dataDict["minRR"]
        };

        List<ModelClass> modelClasses = new List<ModelClass>() { mc, mcSGD, mcANNPSO, mcANNSGD };

        string jsonString = JsonConvert.SerializeObject(modelClasses);

        rdf.WriteLine(jsonString);
        rdf.Close();
        #endregion
        trainingComplete = true;
    }

    public IEnumerator UploadNewWeightsANNSGD(int dataLinesNum)
    {
        weightsUploaded = true;
        var uploadString = String.Join(",", weightChanges);
        //var uploadString = String.Join(",", newWeightsANNBPNonInitialized);
        UnityWebRequest req = UnityWebRequest.Get(
            "http://192.168.1.114:5000/api/MorpheusData/PostValues?data="
                + uploadString
                + "&device="
                + SystemInfo.deviceUniqueIdentifier
                + Guid.NewGuid()
                + "&error="
                + modelErrorANNBP.ToString()
                + "&mode=ANNSGD&deviceData="
                + dataLinesNum
        );
        /* UnityWebRequest req = UnityWebRequest.Get(
            "https://morpheusapi.azurewebsites.net/api/MorpheusData/PostValues?data="
                + uploadString
                + "&device="
                + SystemInfo.deviceUniqueIdentifier
                + Guid.NewGuid()
                + "&error="
                + modelErrorANNBP.ToString()
                + "&mode=ANNSGD&deviceData="
                + dataLinesNum
        ); */
        /* UnityWebRequest req = UnityWebRequest.Get(
            "https://localhost:44309/api/MorpheusData/PostValues?data="
                + uploadString
                + "&device="
                + SystemInfo.deviceUniqueIdentifier
                + Guid.NewGuid()
                + "&error="
                + modelErrorANNBP.ToString()
                + "&mode=ANNSGD&deviceData="
                + trainData.Length
        ); */

        yield return req.SendWebRequest();
    }
}
